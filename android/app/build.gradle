def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new RuntimeException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0.0"
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

// 判断是否为release模式
boolean isReleaseBuildType(){
    for(String s : gradle.startParameter.taskNames) {
        if (s.contains("Release") | s.contains("release")) {
            return true
        }
    }
    return false
}

def keystoreProperties = new Properties()

if (isReleaseBuildType()) {
    def keystorePropertiesFile = rootProject.file("key.properties")
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    } else {
        throw new RuntimeException("release模式需要在app目录下创建key.properties")
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.mob.sdk'

android {
    compileSdk 34

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.zhushenwudi.lovelivemusicplayer"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    splits {
        abi {
            reset()
            enable releaseBuildType
            universalApk false
            //noinspection ChromeOsAbiSupport
            include "armeabi-v7a", "arm64-v8a"
        }
    }

    signingConfigs {
        if (releaseBuildType) {
            release {
                keyAlias keystoreProperties["keyAlias"]
                keyPassword keystoreProperties["storePassword"]
                storeFile file(keystoreProperties["storeFile"])
                storePassword keystoreProperties["keyPassword"]
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        if (releaseBuildType) {
            release {
                minifyEnabled true
                zipAlignEnabled true
                signingConfig signingConfigs.release
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def abi = output.getFilter(com.android.build.OutputFile.ABI)
            if (abi != null) {
                def abiWithoutPrefix = abi.replaceFirst("^(arm64|armeabi)-", "")
                output.outputFileName = "LLMP_v${variant.versionName}_${abiWithoutPrefix}.apk"
            }
        }
    }

    namespace 'com.zhushenwudi.lovelivemusicplayer'
    lint {
        abortOnError false
        checkReleaseBuilds false
        disable 'InvalidPackage'
    }

    project.afterEvaluate {
        project.android.applicationVariants.configureEach { variant ->
            variant.outputs.each { output ->
                output.processResources.doFirst { pm ->
                    String manifestPath = output.processResources.manifestFile
                    def manifestContent = file(manifestPath).getText()
                    manifestContent = manifestContent.replace('<uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>', '')
                    file(manifestPath).write(manifestContent)
                }
            }
        }
    }
}

MobSDK {
    appKey "375f94ab8316c"
    appSecret "9cac7a0532d211eb04fcf6b25b197859"

    ShareSDK {
        devInfo {
            QQ {
                id 1
                sortId 1
                appId "102039234"
                appKey "Yw6JL8gz82h7KI1V"
                shareByAppClient true
                bypassApproval false
                enable true
            }

            QZone {
                id 2
                sortId 2
                appId "102039234"
                appKey "Yw6JL8gz82h7KI1V"
                shareByAppClient true
                bypassApproval false
                enable true
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation fileTree(dir: "libs", include: ["library-*.aar"])
    implementation fileTree(dir: "libs", include: ["extension-*.aar"])
}
